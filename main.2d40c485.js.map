{"version":3,"sources":["virtual-keyboard.mjs","game-board.mjs","popup-message.mjs","utils.mjs","prng.mjs","main.js"],"names":["VirtualKeyboard","HTMLElement","keys","shadowRoot","attachShadow","mode","style","document","createElement","textContent","append","row","rowDiv","key","keyDiv","className","disabled","control","space","value","addEventListener","keyPress","console","log","dispatchEvent","CustomEvent","detail","customElements","define","GameBoard","state","game","word","idiom","split","forEach","l","i","cell","classList","add","isSolving","position","guess","revealed","includes","cellLetter","over","PopupMessage","template","content","cloneNode","e","handleClick","event","target","nodeName","name","innerHTML","numStars","s","Math","max","floor","loadFile","file","fetch","then","response","text","d","Date","getFullYear","String","getMonth","padStart","getDate","getHistory","JSON","parse","localStorage","getItem","putHistory","history","setItem","stringify","isEmpty","obj","Object","length","isFinished","board","makeGenerator","seed","a","c","m","pow","prng","generator","next","timeoutId","random","randInt","n","v","isLetter","countLetters","replaceAll","goal","clicky","error","loadGame","saveGame","renderKeyboard","container","getElementById","letter","map","keyboard","setupVirtualKeyboardHandler","renderBoard","gameBoard","showSuccess","clearTimeout","render","moveToPreviousGuessLetter","moveToNextBlank","getLetters","wordIndex","filter","countUnrevealed","letters","reduce","acc","nextLetter","unrevealedByWord","maxUnrevealed","values","nextLetters","startClock","setTimeout","fn","letterCount","push","ticks","streak","clearPopup","app","popup","querySelector","removeChild","handleBackspace","temp","splice","join","handleLetterInput","handleEscape","repeat","handleEnter","showFailure","handleSolve","setupKeyboardHandler","solving","calculateStreak","pk","sort","k","calcScore","round","emojiIdiom","message","div","setAttribute","data","title","navigator","canShare","share","visibility","clipboard","writeText","appendChild","init","idioms","newUser","showPopup","Promise","resolve","started","showHelp","main","idiomsFile"],"mappings":"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","file":"main.2d40c485.js","sourceRoot":"../src","sourcesContent":["export class VirtualKeyboard extends HTMLElement {\n    constructor(keys) {\n        super();\n\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        const style = document.createElement('style');\n\n        style.textContent = `\n            :host {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                gap: 5px;\n                cursor: pointer;\n            }\n\n            :host > div {\n                display: flex;\n                gap: 5px;\n                height: 48px;\n            }\n\n            .key {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                border: solid 1px var(--key-border-color);\n                border-radius: var(--letter-border-radius);\n                background-color: var(--key-background-color);\n                color: var(--key-color);\n                height: 30px;\n                width: 30px;\n                font-size: 24px;\n                text-transform: uppercase;\n                box-sizing: border-box;\n            }\n\n            .control {\n                width: 75px;\n            }\n\n            .solve {\n                width: 120px;\n            }\n\n            .space {\n                width: 270px;\n            }\n\n            .disabled {\n                opacity: 0.1;\n            }\n        `;\n        shadowRoot.append(style);\n\n        for (let row of keys) {\n            const rowDiv = document.createElement('div');\n\n            for (let key of row) {\n                const keyDiv = document.createElement('div');\n\n                keyDiv.className = `key${key.disabled ? ' disabled' : ''}${key.control ? ' control' : ''}${key.space ? ' space' : ''}${key.value === 'Solve' ? ' solve' : ''}`;\n                keyDiv.textContent = key.value;\n                if (!key.disabled) keyDiv.addEventListener('click', () => this.keyPress(key.value));\n                rowDiv.append(keyDiv);\n            }\n\n            shadowRoot.append(rowDiv);\n        }\n    }\n\n    keyPress(key) {\n        console.log(key);\n        this.dispatchEvent(new CustomEvent('keypress', { detail: { key } }));\n    }\n}\n\ncustomElements.define('virtual-keyboard', VirtualKeyboard);\n","export class GameBoard extends HTMLElement {\n    constructor(state) {\n        const { game } = state;\n        super();\n\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        const style = document.createElement('style');\n\n        style.textContent = `\n            :host {\n                display: flex;\n                flex-wrap: wrap;\n                gap: 20px;\n                user-select: none;\n                max-width: 450px;\n                justify-content: center;\n            }\n\n            .word {\n                display: flex;\n                gap: 5px;\n                flex-wrap: nowrap;\n            }\n\n            .cell {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                border-radius: var(--letter-border-radius);\n                height: 32px;\n                width: 32px;\n                font-size: 24px;\n                text-transform: uppercase;\n                box-sizing: border-box;\n                cursor: pointer;\n                box-shadow: var(--letter-box-shadow);\n                background-color: var(--letter-background-color);\n                border: solid 1px var(--border-color);\n                color: var(--letter-color);\n            }\n\n            .active {\n                border: solid 2px var(--letter-border-color-active);\n                background-color: var(--letter-background-color-active);\n            }\n\n            .guessed {\n                background-color: var(--letter-background-color-start);\n                border-color: var(--letter-border-color-start);\n                color: var(--letter-color-start);\n                box-shadow: var(--letter-box-shadow-start);\n            }\n        `;\n\n        shadowRoot.append(style);\n\n        let word = document.createElement('div');\n        word.className = 'word';\n\n        let board = '';\n\n        game.idiom.split('').forEach((l, i) => {\n            if (l === ' ') {\n                shadowRoot.append(word);\n\n                word = document.createElement('div');\n                word.className = 'word';\n\n                board += ' ';\n            } else {\n                const cell = document.createElement('div');\n                cell.classList.add('cell');\n                if (state.isSolving && state.position === i) cell.classList.add('active');\n                if (state.guess[i] !== ' ' && !game.revealed.includes(i)) cell.classList.add('guessed');\n\n                const cellLetter = game.revealed.includes(i) ? l : game.over ? game.idiom[i] : state.guess[i];\n\n                board += cellLetter;\n\n                cell.textContent = cellLetter;\n\n                word.append(cell);\n            }\n        });\n\n        shadowRoot.append(word);\n    }\n}\n\ncustomElements.define('game-board', GameBoard);\n","export class PopupMessage extends HTMLElement {\n    constructor() {\n        super();\n\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        shadowRoot.append(template.content.cloneNode(true));\n        shadowRoot.addEventListener('click', (e) => this.handleClick(e));\n    }\n\n    handleClick(event) {\n        if (event.target.nodeName === 'BUTTON') {\n            this.dispatchEvent(new CustomEvent('buttonClick', { detail: { name: event.target.textContent } }));\n        }\n    }\n}\n\ncustomElements.define('popup-message', PopupMessage);\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = `\n    <style>\n        :host {\n            position: fixed;\n            top: var(--popup-top);\n            left: 50%;\n            transform: translate(-50%, 0);\n            width: 300px;\n            font-size: 20px;\n            border: solid 1px var(--popup-border-color);\n            border-radius: var(--popup-border-radius);\n            background-color: var(--popup-background-color);\n            text-align: center;\n            box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.25);\n        }\n\n        div {\n            padding: 10px;\n            color: var(--popup-color);\n        }\n    </style>\n    <div class=\"popup\">\n        <slot name=\"content\"></slot>\n    </div>\n`;\n","export const numStars = (s) => Math.max(0, 5 - Math.floor(s / 60));\n\nexport const loadFile = (file) => fetch(file).then((response) => response.text()).then((text) => text.split('\\n'));\n\nexport const key = () => {\n    const d = new Date(); // local time\n\n    return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;\n}\n\nexport const getHistory = () => JSON.parse(localStorage.getItem('shootingblanks')) ?? {};\n\nexport const putHistory = (history) => localStorage.setItem('shootingblanks', JSON.stringify(history));\n\nexport const isEmpty = (obj) => Object.keys(obj).length === 0;\n\nexport const isFinished = (state) => {\n    let board = '';\n\n    state.game.idiom.split('').forEach((l, i) => {\n        if (l === ' ') {\n            board += ' ';\n        } else {\n            const cellLetter = state.game.revealed.includes(i) ? l : state.guess[i];\n\n            board += cellLetter;\n        }\n    });\n\n    return state.game.idiom === board;\n}\n","function* makeGenerator(seed) {\n    let value = seed;\n\n    const a = 1103515245;\n    const c = 12345;\n    const m = Math.pow(2, 31);\n\n    while (true) {\n        value = (a * value + c) % m;\n        yield value / m;\n    }\n}\n\nexport const prng = (seed) => {\n    const generator = makeGenerator(seed);\n\n    return () => generator.next().value;\n};\n","'use strict';\n\nimport idiomsFile from './idioms.txt';\n\nimport { VirtualKeyboard } from './virtual-keyboard.mjs';\nimport { GameBoard } from './game-board.mjs';\nimport { PopupMessage } from './popup-message.mjs';\nimport { loadFile, key, getHistory, putHistory, isEmpty, isFinished } from './utils.mjs';\nimport { prng } from './prng.mjs';\n\nlet timeoutId = null;\n\nconst seed = Date.parse(key());\nconst random = prng(seed);\nconst randInt = (n) => {\n    const v = Math.floor(random() * n);\n    console.log(v);\n    return v;\n};\n\nconst isLetter = (s) => s.length === 1 && ((s >= 'a' && s <= 'z') || (s >= 'A' && s <= 'Z'));\n\nconst countLetters = (idiom) => idiom.replaceAll(' ', '').length;\n\nfunction goal(name) {\n    try {\n        clicky.goal('shootingblanks.' + name);\n    } catch (e) {\n        console.error('Error logging goal', name, e);\n    }\n}\n\nfunction loadGame() {\n    const history = getHistory();\n\n    return history[key()];\n}\n\nfunction saveGame(game) {\n    const history = getHistory();\n\n    history[key()] = game;\n\n    putHistory(history);\n}\n\nfunction renderKeyboard(state) {\n    const container = document.getElementById('keyboard');\n    container.innerHTML = '';\n\n    const control = (value) => ({ value, control: true });\n    const letter = (value) => ({ value });\n\n    const keys = state.isSolving ? [\n        ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'].map(letter),\n        ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'].map(letter),\n        [control('⏎'), ...['z', 'x', 'c', 'v', 'b', 'n', 'm'].map(letter), control('⌫')],\n    ] : [\n        [ control('Solve')]\n    ];\n\n    const keyboard = new VirtualKeyboard(keys);\n\n    container.append(keyboard);\n\n    setupVirtualKeyboardHandler(state);\n}\n\nfunction renderBoard(state) {\n    const container = document.getElementById('board');\n    const gameBoard = new GameBoard(state);\n\n    container.innerHTML = '';\n    container.append(gameBoard);\n\n    if (state.game.over) {\n        showSuccess(state);\n        clearTimeout(timeoutId);\n    }\n\n    saveGame(state.game);\n}\n\nfunction render(state) {\n    renderBoard(state);\n\n    if (!state.game.over) renderKeyboard(state);\n}\n\nfunction moveToPreviousGuessLetter(state) {\n    let i = state.position;\n\n    do {\n        i -= 1;\n    } while (\n        (state.game.idiom[i] === ' ' ||\n            state.game.revealed.includes(i)) &&\n        i > 0\n    )\n\n    state.position = i;\n}\n\nfunction moveToNextBlank(state) {\n    let i = state.position;\n\n    do {\n        i += 1;\n    } while (\n        (state.game.idiom[i] === ' ' ||\n            state.guess[i] !== ' ' ||\n            state.game.revealed.includes(i)) &&\n        i < state.game.idiom.length\n    )\n\n    state.position = i;\n}\n\nfunction getLetters(game) {\n    let wordIndex = 0;\n\n    return game.idiom.split('').map((letter, i) => {\n        if (letter === ' ') wordIndex++;\n\n        return {\n            letter,\n            i,\n            wordIndex,\n            revealed: game.revealed.includes(i)\n        };\n    }).filter((l) => l.letter !== ' ');\n}\n\nfunction countUnrevealed(letters) {\n    return letters.reduce((acc, letter) => {\n        const { wordIndex, revealed } = letter;\n\n        acc[wordIndex] ||= 0;\n\n        if (!revealed) acc[wordIndex]++;\n\n        return acc;\n    }, {});\n}\n\nfunction nextLetter(game) {\n    const letters = getLetters(game);\n    const unrevealedByWord = countUnrevealed(letters);\n    const maxUnrevealed = Math.max(...Object.values(unrevealedByWord));\n\n    const nextLetters = letters.filter((letter) => {\n        return unrevealedByWord[letter.wordIndex] === maxUnrevealed;\n    }).filter((letter) => {\n        return !letter.revealed;\n    })\n\n    let i = randInt(nextLetters.length);\n\n    return nextLetters[i].i;\n}\n\n\nfunction startClock(state) {\n    const { game } = state;\n\n    const fn = () => {\n        const letterCount = countLetters(game.idiom);\n\n        let i = nextLetter(game);\n\n        if (i === state.position) {\n            moveToNextBlank(state);\n        }\n\n        game.revealed.push(i);\n        game.ticks += 1;\n\n        if (game.revealed.length === letterCount) {\n            game.over = true;\n            state.streak++;\n        }\n\n        if (!game.over) {\n            timeoutId = setTimeout(fn, (game.ticks + 1) * 1000);\n        }\n\n        render(state);\n    };\n\n    timeoutId = setTimeout(fn, (game.ticks + 1) * 1000);\n}\n\nfunction clearPopup() {\n    const app = document.getElementById('app');\n    const popup = app.querySelector('popup-message');\n\n    if (popup) {\n        app.removeChild(popup);\n\n        return true;\n    }\n\n    return false;\n}\n\nfunction handleBackspace(state) {\n    const temp = state.guess.split('');\n\n    moveToPreviousGuessLetter(state);\n\n    temp.splice(state.position, 1, ' ');\n\n    state.guess = temp.join('');\n}\n\nfunction handleLetterInput(state, letter) {\n    const temp = state.guess.split('');\n\n    temp.splice(state.position, 1, letter);\n\n    state.guess = temp.join('');\n\n    moveToNextBlank(state);\n}\n\nfunction handleEscape(state) {\n    state.guess = ' '.repeat(state.game.idiom.length);\n    state.position = 0;\n}\n\nfunction handleEnter(state) {\n    if (isFinished(state)) {\n        state.streak++;\n        state.game.over = true;\n    } else {\n        showFailure(state);\n        state.guess = ' '.repeat(state.game.idiom.length);\n        state.position = 0;\n        state.isSolving = false;\n        startClock(state);\n    }\n\n    render(state);\n}\n\nfunction handleSolve(state) {\n    clearTimeout(timeoutId);\n\n    state.isSolving = true;\n\n    render(state);\n}\n\nfunction setupVirtualKeyboardHandler(state) {\n    const keyboard = document.querySelector('virtual-keyboard');\n\n    const game = state.game;\n\n    keyboard.addEventListener('keypress', (event) => {\n        clearPopup();\n\n        if (game.over) return;\n\n        const key = event.detail.key;\n\n        if (key === '⌫') {\n            handleBackspace(state);\n        } else if (key === '⏎') {\n            handleEnter(state);\n        } else if (key.length === 1 && state.position < game.idiom.length) {\n            handleLetterInput(state, key);\n        } else if (key === 'Solve') {\n            handleSolve(state);\n        }\n\n        render(state);\n    });\n\n}\n\nfunction setupKeyboardHandler(state) {\n    const game = state.game;\n\n    document.addEventListener('keydown', (e) => {\n        clearPopup();\n\n        if (game.over) return;\n\n        switch (e.key) {\n            case 'Backspace':\n                if (state.isSolving) handleBackspace(state);\n                break;\n            case 'Escape':\n                if (state.isSolving) handleEscape(state);\n                break;\n            case 'Enter':\n                if (state.isSolving) {\n                    handleEnter(state);\n                } else {\n                    handleSolve(state);\n                }\n                break;\n            case ' ':\n                if (!state.solving) handleSolve(state);\n                break;\n            default:\n                if (state.isSolving && isLetter(e.key) && state.position < game.idiom.length) {\n                    handleLetterInput(state, e.key);\n                } else {\n                    console.log(e.key);\n                }\n        }\n\n        render(state);\n    });\n}\n\nfunction calculateStreak(history) {\n    let streak = 0;\n    const keys = Object.keys(history);\n    let pk = null;\n\n    keys.sort().forEach((k) => {\n        const game = history[k];\n\n        if ((!game.over && k !== key()) || (pk && new Date(k) - new Date(pk) > 86400000)) {\n            streak = 0;\n        }\n\n        if (game.over) {\n            streak++;\n        }\n\n        pk = k;\n    });\n\n    if (pk && new Date(key()) - new Date(pk) > 86400000) {\n        streak = 0;\n    }\n\n    return streak;\n}\n\nconst calcScore = (revealed, letterCount) => Math.round((1 - (revealed / letterCount)) * 100);\n\nfunction emojiIdiom(idiom, revealed) {\n    return idiom.split('').map((l, i) => {\n        if (l === ' ') return l;\n\n        return revealed.includes(i) ? '⬜' : '🟨';\n    }).join('');\n}\n\nfunction showSuccess(state) {\n    const revealed = state.game.revealed.length;\n    const letterCount = countLetters(state.game.idiom);\n\n    const message = `\n        <p>You're done!</p>\n        <p>${revealed < letterCount ? `You solved it after ${revealed} letters.` : 'You just watched it play out huh?'}</p>\n        <p>Your score is ${calcScore(revealed, letterCount)}</p>\n        <div>\n        ${emojiIdiom(state.game.idiom, state.game.revealed)}\n        </div>\n        <p>Your streak is ${state.streak}, come back tomorrow to extend it.</p>\n        <p id=\"copied\">Copied to clipboard.</p>\n        <div class=\"buttons\">\n        <button>Share</button>\n        <button>Copy</button>\n        <button>OK</button>\n        <button>*</button>\n        </div>\n    `;\n\n    const app = document.getElementById('app');\n    const popup = new PopupMessage('success');\n    const div = document.createElement('div');\n\n    div.setAttribute('id', 'popup');\n    div.setAttribute('slot', 'content');\n    div.innerHTML = message;\n\n    popup.addEventListener('buttonClick', (e) => {\n        const { name } = e.detail;\n\n        if (name === 'Share' || name === 'Copy') {\n            goal('Shared');\n\n            const share = [\n                'Shooting Blanks by @emh',\n                emojiIdiom(state.game.idiom, state.game.revealed),\n                `Score: ${calcScore(state.game.revealed.length, countLetters(state.game.idiom))}`,\n                `Streak: ${state.streak}`,\n                '',\n                'https://emh.io/shootingblanks'\n            ];\n\n            const data = {\n                title: 'Shooting Blanks',\n                text: share.join('\\n')\n            };\n\n            if (name === 'Share' && navigator.canShare && navigator.canShare(data)) {\n                navigator.share(data);\n            } else {\n                const div = document.querySelector('#copied');\n                div.style.visibility = \"visible\";\n\n                navigator.clipboard.writeText(data.text);\n            }\n        } else if (name === '*') {\n            navigator.clipboard.writeText(localStorage.getItem('shootingblanks'));\n        } else {\n            app.removeChild(popup);\n        }\n    });\n\n    popup.append(div);\n    app.appendChild(popup);\n}\n\nfunction init(idioms) {\n    const history = getHistory();\n    const newUser = isEmpty(history);\n    const streak = calculateStreak(history);\n    const idiom = idioms[randInt(idioms.length)];\n\n    let game = loadGame();\n\n    if (!game) {\n        game = {\n            idiom,\n            revealed: [],\n            ticks: 0\n        };\n\n        saveGame(game);\n    }\n\n    return {\n        streak,\n        newUser,\n        game,\n        isSolving: false,\n        guess: ' '.repeat(idiom.length),\n        position: 0\n    };\n}\n\nfunction showFailure(state) {\n    const div = document.getElementById('message');\n\n    div.innerHTML = \"NOPE\";\n\n    setTimeout(() => div.innerHTML = '', 1000);\n}\n\nfunction showPopup(state) {\n    return new Promise((resolve) => {\n        const app = document.getElementById('app');\n        const popup = new PopupMessage();\n\n        const div = document.createElement('div');\n        div.setAttribute('slot', 'content');\n        let message = '';\n\n        if (state.newUser) {\n            message = `\n                <p>Welcome to Shooting Blanks.</p>\n                <p>Try to guess the phrase before all of the letters are revealed to you.</p>\n                <p>Click Solve when you think you got it and then enter your guess with the keyboard.</p>\n            `;\n        } else {\n            message = `\n                <p>Welcome back!</p>\n                <p>Click Solve when you think you got it and then enter your guess with the keyboard.</p>\n                ${state.streak > 0 ?\n                    `<p>Your streak is currently ${state.streak}.</p>` :\n                    '<p>Starting a new streak today - come back daily to keep it going.'\n                }\n            `;\n        }\n\n        div.innerHTML = `\n            ${message}\n            <p>Ready?</p>\n            <div class=\"buttons\">\n                <button>Help</button>\n                <button autofocus>Start</button>\n            </div>\n        `;\n\n        popup.append(div);\n\n        popup.addEventListener('buttonClick', (event) => {\n            const { name } = event.detail;\n\n            if (name === 'Start') {\n                app.removeChild(popup);\n                state.started = true;\n                resolve();\n            } else {\n                showHelp();\n            }\n        });\n\n        app.appendChild(popup);\n    });\n}\n\nasync function main() {\n    const idioms = await loadFile(idiomsFile);\n    const state = init(idioms);\n\n    render(state);\n\n    if (!state.game.over) {\n        showPopup(state).then(() => {\n            startClock(state);\n            setupKeyboardHandler(state);\n        });\n    }\n};\n\nmain();\n"]}